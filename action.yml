name: "Prepare Raspbian Sysroot"
description: "Prepare a Raspbian sysroot for cross-compiling for Raspberry Pi"
branding:
  color: purple
  icon: cpu

inputs:
  sysroot:
    description: "Location of sysroot"
    default: "/opt/pi-sysroot"
    required: true
  release:
    description: "Raspbian release"
    default: "bullseye"
    required: true
  packages:
    description: "Packages to install for sysroot, can be a string or path to packages list"
    default: ""
    required: false
  basefs:
    description: "Path to cached basefs archive"
    default: /tmp/pi-debootstrap-basefs.tar.gz
    required: false

outputs:
  sysroot:
    description: "Location of sysroot"
    value: ${{ inputs.sysroot }}
  cmake-toolchain:
    description: "Path to CMake toolchain for cross compiling"
    value: ${{ inputs.sysroot }}/toolchain.cmake
  shell-envsetup:
    description: "Path to envsetup script for cross compiling"
    value: ${{ inputs.sysroot }}/envsetup.sh

runs:
  using: "composite"
  steps:
    - name: Generate Hashes
      id: hashes
      shell: bash
      env:
        PACKAGES: ${{ inputs.packages }}
      working-directory: ${{ github.action_path }}
      run: |
        # Read packages into variable if it's a file
        if [ -f "${{ inputs.packages }}" ]; then
          PACKAGES=$(cat "$PACKAGES")
        fi
        echo "packages=$(echo "$PACKAGES" | sha256sum | head -c 64)" >> $GITHUB_OUTPUT
        echo "basefs=$(sha256sum basefs.sh | head -c 64)" >> $GITHUB_OUTPUT
        echo "sysroot=$(sha256sum sysroot.sh | head -c 64)" >> $GITHUB_OUTPUT
        echo "scripts=$(sha256sum scripts.sh | head -c 64)" >> $GITHUB_OUTPUT

    - name: Cache Sysroot
      uses: actions/cache@v3
      id: cache-sysroot
      with:
        path: |
          ${{ inputs.sysroot }}/bin
          ${{ inputs.sysroot }}/lib
          ${{ inputs.sysroot }}/opt
          ${{ inputs.sysroot }}/usr
        key: sysroot-${{ inputs.release }}-${{ steps.hashes.outputs.sysroot }}-${{ steps.hashes.outputs.packages }}-${{ steps.hashes.outputs.scripts }}

    - name: Cache Base Filesystem
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      id: cache-basefs
      with:
        path: ${{ inputs.basefs }}
        key: basefs-${{ inputs.release }}-${{ steps.hashes.outputs.basefs }}

    - name: Update packages
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      shell: bash
      run: sudo apt-get -yq update || true

    - name: Prepare Base System
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ github.action_path }}
      run: sudo SYSROOT=${{ inputs.sysroot }} RELEASE=${{ inputs.release }} ARCHIVE=${{ inputs.basefs }} bash basefs.sh

    - name: Setup Sysroot
      if: steps.cache-sysroot.outputs.cache-hit != 'true'
      shell: bash
      env:
        SYSROOT: ${{ inputs.sysroot }}
        PACKAGES: ${{ inputs.packages }}
      working-directory: ${{ github.action_path }}
      run: |
        # Read packages into variable if it's a file
        if [ -f "$PACKAGES" ]; then
          PACKAGES=$(cat "$PACKAGES")
        fi
        sudo PACKAGES="$PACKAGES" chroot "$SYSROOT" /bin/bash < sysroot.sh

    - name: Install Scripts
      shell: bash
      env:
        SYSROOT: ${{ inputs.sysroot }}
      working-directory: ${{ github.action_path }}
      run: sudo SYSROOT="$SYSROOT" bash scripts.sh
